// <auto-generated />
using FantasyPortal.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FantasyPortal.DataAccess.Migrations
{
    [DbContext(typeof(FantasyPortalDbContext))]
    partial class FantasyPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.Author", b =>
                {
                    b.Property<string>("AuthorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<int>("Popularity");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.Book", b =>
                {
                    b.Property<string>("BookId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<float>("Rating");

                    b.Property<string>("Synopsis");

                    b.Property<int>("WordCount");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookAuthor", b =>
                {
                    b.Property<string>("BookId");

                    b.Property<string>("AuthorId");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookPublisher", b =>
                {
                    b.Property<string>("BookId");

                    b.Property<string>("PublisherId");

                    b.HasKey("BookId", "PublisherId");

                    b.HasIndex("PublisherId");

                    b.ToTable("BookPublishers");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookSubgenre", b =>
                {
                    b.Property<string>("BookId");

                    b.Property<string>("SubgenreId");

                    b.HasKey("BookId", "SubgenreId");

                    b.HasIndex("SubgenreId");

                    b.ToTable("BookSubgenres");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.Publisher", b =>
                {
                    b.Property<string>("PublisherId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Region");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.Subgenre", b =>
                {
                    b.Property<string>("SubgenreId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("SubgenreId");

                    b.ToTable("Subgenres");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.UserBook", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("BookId");

                    b.Property<int>("Mark");

                    b.Property<string>("Progress");

                    b.Property<string>("Review");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookAuthor", b =>
                {
                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookPublisher", b =>
                {
                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Book", "Book")
                        .WithMany("BookPublishers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Publisher", "Publisher")
                        .WithMany("BookPublishers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookSubgenre", b =>
                {
                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Book", "Book")
                        .WithMany("BookSubgenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Subgenre", "Subgenre")
                        .WithMany("BookSubgenres")
                        .HasForeignKey("SubgenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.UserBook", b =>
                {
                    b.HasOne("FantasyPortal.ApplicationLogic.Data.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Book", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
