// <auto-generated />
using FantasyPortal.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FantasyPortal.DataAccess.Migrations
{
    [DbContext(typeof(FantasyPortalDbContext))]
    partial class FantasyPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<int>("Popularity");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<float>("Rating");

                    b.Property<string>("Synopsis");

                    b.Property<int>("WordCount");

                    b.HasKey("BookId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookAuthor", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("AuthorId");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookPublisher", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("PublisherId");

                    b.HasKey("BookId", "PublisherId");

                    b.HasIndex("PublisherId");

                    b.ToTable("BookPublisher");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookSubgenre", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("SubgenreId");

                    b.HasKey("BookId", "SubgenreId");

                    b.HasIndex("SubgenreId");

                    b.ToTable("BookSubgenre");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Region");

                    b.HasKey("PublisherId");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.Subgenre", b =>
                {
                    b.Property<int>("SubgenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Description");

                    b.Property<int>("Name");

                    b.HasKey("SubgenreId");

                    b.ToTable("Subgenre");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.UserBook", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("BookId");

                    b.Property<int>("Mark");

                    b.Property<string>("Progress");

                    b.Property<string>("Review");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserBook");
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookAuthor", b =>
                {
                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Author", "Authors")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Book", "Books")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookPublisher", b =>
                {
                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Book", "Books")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Publisher", "Publishers")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.BookSubgenre", b =>
                {
                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Book", "Books")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Subgenre", "Subgenres")
                        .WithMany()
                        .HasForeignKey("SubgenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FantasyPortal.ApplicationLogic.Data.UserBook", b =>
                {
                    b.HasOne("FantasyPortal.ApplicationLogic.Data.Book", "Books")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FantasyPortal.ApplicationLogic.Data.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
